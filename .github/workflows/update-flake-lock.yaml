name: update-flake-lock
on:
  workflow_dispatch: # allows manual triggering
  schedule:
    - cron: "0 0 * * 0" # runs weekly on Sunday at 00:00

jobs:
  lockfile:
    env:
      BRANCH: chore/update-flake-lock

    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - uses: cachix/install-nix-action@v31
        with:
          github_access_token: ${{ secrets.GITHUB_TOKEN }}

      - uses: cachix/cachix-action@v16
        with:
          name: kidibox
          authToken: "${{ secrets.CACHIX_AUTH_TOKEN }}"

      - name: Create or update branch
        run: |
          git checkout -b $BRANCH
          git push -u origin $BRANCH --force

      - name: Update flake.lock
        id: update-flake
        run: |
          echo "result<<EOF" >> $GITHUB_OUTPUT
          nix flake update 2>&1 | tee -a $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Check for changes
        id: check-changes
        run: |
          CHANGED=$(git status --porcelain)
          if [ -z "$CHANGED" ]; then
            echo "No changes detected."
            echo "changes=false" >> $GITHUB_ENV
          else
            echo "Changes detected."
            echo "changes=true" >> $GITHUB_ENV
          fi

      - name: Commit changes
        if: env.changes == 'true'
        run: |
          #!/usr/bin/env bash

          set -euo pipefail

          mapfile -t CHANGED < <(git diff --name-only | xargs)

          declare -a FILES
          for value in "${CHANGED[@]}"; do
            FILES+=(-F "files[][path]=$value" -F "files[][contents]=$(base64 -w0 "$value")")
          done

          gh api graphql \
            -F githubRepository="$GITHUB_REPOSITORY" \
            -F branchName="$BRANCH" \
            -F expectedHeadOid="$(git rev-parse HEAD)" \
            -F commitMessage="chore: update flake.lock" \
            -F "query=@.github/api/createCommitOnBranch.gql" \
            "${FILES[@]}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create pull request if not exists
        if: env.changes == 'true'
        run: |
          #!/usr/bin/env bash

          set -euo pipefail

          PR_ID=$(gh pr list --head "$BRANCH" --json number -q '.[0].number')

          if [ -z "$PR_ID" ]; then
            git reset --hard "$GITHUB_REF"
            git pull
            gh pr create \
              --title "chore: update flake.lock" \
              --body "${PR_BODY}" \
              --base "${GITHUB_REF}" \
              --head "${BRANCH}"
          else
            gh pr update "$PR_ID" --body "${PR_BODY}"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_BODY: |
            ```
            ${{ steps.update-flake.outputs.result }}
            ```
